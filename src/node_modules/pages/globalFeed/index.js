import React, { useState, useEffect, Fragment } from 'react'
import { stringify } from 'query-string'
import useFetch from 'hooks/useFetch'
import Feed from 'components/feed'
import Pagination from 'components/pagination'
import { getPaginator, limit } from 'utils'

const GlobalFeed = (props) => {
  const [value, setValue] = useState('')
  const { offset, currentPage } = getPaginator(props.location.search)
  const stringifiedParams = stringify({
    limit,
    offset
  })
  const apiURL = `/book?${stringifiedParams}`
  const [{ response, isLoading, error }, doFetch] = useFetch(apiURL) 
  const [responseData, setResponseData] = useState(response) 
  const url = props.match.url

  useEffect(() => {
    doFetch()
  }, [doFetch, currentPage])


  const onSubmit = event => {
    if (event.key === 'Enter') {
      return
    }
    if (value.trim()) {
      console.log('make reqest', value)
    }
  }

  const sortData = (responseData) => {
    let sortByRaiting = responseData.data.sort(function (a, b) {
      return b.rating - a.rating
    })
    setResponseData(sortByRaiting)
  }

  return <div className='home-page'>
    <div className='banner'>
      <h1>Book</h1>
      <p>A place to share knowledge</p>
    </div>

    <div className="row navbar navbar-light">
      <label className="col-sm-1"></label>
      <div className="col-sm-5">
        <input
          className="form-control"
          id="focusedInput"
          type="text"
          placeholder="Search"
          value={value}
          onChange={event => setValue(event.target.value)}
          onKeyPress={onSubmit}
        />
      </div>

      <div className="col-sm-3 ">
        <button
          type="button"
          onClick={() => sortData(response)}
          className="btn btn-success">Sort by rating</button>
      </div>
    </div>

    <div className="container page">
      <div className="row">
        <div className="col-md-9">
          {isLoading && <div>Loading...</div>}
          {error && <div>Some error happend</div>}
          {!isLoading && response && (
            <Fragment>
              <Feed
                books={responseData || response.data}
                value={value}
              />
              <Pagination total={5} limit={limit} url={url} currentPage={currentPage} />
            </Fragment>
          )}
        </div>
      </div>
    </div>
  </div>
}

export default GlobalFeed
